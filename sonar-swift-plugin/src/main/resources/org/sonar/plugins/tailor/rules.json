[
    {
        "key": "arrow-whitespace",
        "category": "Tailor",
        "name": "Arrow Whitespace",
        "severity": "MINOR",
        "description": "Flags all return arrows (->) that are not space delimited.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#arrow-whitespace"
    },
    {
        "key": "angle-bracket-whitespace",
        "category": "Tailor",
        "name": "Angle Bracket Whitespace",
        "severity": "MINOR",
        "description": "Ensure no whitespace is present immediately before/after an opening chevron and before the closing chevron.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#angle-bracket-whitespace"
    },
    {
        "key": "brace-style",
        "category": "Tailor",
        "name": "Brace Style",
        "severity": "MINOR",
        "description": "Definitions of constructs should follow the One True Brace Style (1TBS).",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#brace-style"
    },
    {
        "key": "colon-whitespace",
        "category": "Tailor",
        "name": "Colon Whitespace",
        "severity": "MINOR",
        "description": "Flag whitespace violations around colons (:).",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#colon-whitespace"
    },
    {
        "key": "comma-whitespace",
        "category": "Tailor",
        "name": "Comma Whitespace",
        "severity": "MINOR",
        "description": "Flags all commas (,) that are not left associated.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#comma-whitespace"
    },
    {
        "key": "comment-whitespace",
        "category": "Tailor",
        "name": "Comment Whitespace",
        "severity": "MINOR",
        "description": "Ensure at least one whitespace character after a comment opening symbol (// or /*) and at least one whitespace character before a comment closing symbol (*/).",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#comment-whitespace"
    },
    {
        "key": "constant-k-prefix",
        "category": "Tailor",
        "name": "Constant K Prefix",
        "severity": "MINOR",
        "description": "Flag constants with prefix k.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#constant-k-prefix"
    },
    {
        "key": "constant-naming",
        "category": "Tailor",
        "name": "Constant Naming",
        "severity": "CRITICAL",
        "description": "Global constants should follow either UpperCamelCase or lowerCamelCase naming conventions. Local constants should follow lowerCamelCase naming conventions.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#constant-naming"
    },
    {
        "key": "forced-type-cast",
        "category": "Tailor",
        "name": "Forced Type Cast",
        "severity": "MAJOR",
        "description": "Flag uses of the forced form of the type cast operator (as!).",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#forced-type-cast"
    },
    {
        "key": "function-whitespace",
        "category": "Tailor",
        "name": "Function Whitespace",
        "severity": "MINOR",
        "description": "Every function declaration except those at the start and end of file should have one blank line before and after itself.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#function-whitespace"
    },
    {
        "key": "leading-whitespace",
        "category": "Tailor",
        "name": "Leading Whitespace",
        "severity": "MINOR",
        "description": "Verify that source files begin with a non-whitespace character.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#leading-whitespace"
    },
    {
        "key": "lower-camel-case",
        "category": "Tailor",
        "name": "Lower Camel Case",
        "severity": "CRITICAL",
        "description": "Method and variable names should follow lowerCamelCase naming convention.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#lower-camel-case"
    },
    {
        "key": "max-class-length",
        "category": "Tailor",
        "name": "Max Class Length",
        "severity": "MAJOR",
        "description": "Enforce a line limit on the lengths of class bodies.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-class-length"
    },
    {
        "key": "max-closure-length",
        "category": "Tailor",
        "name": "Max Closure Length",
        "severity": "MAJOR",
        "description": "Enforce a line limit on the lengths of closure bodies.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-closure-length"
    },
    {
        "key": "max-file-length",
        "category": "Tailor",
        "name": "Max File Length",
        "severity": "MAJOR",
        "description": "Enforce a line limit on each file.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-file-length"
    },
    {
        "key": "max-function-length",
        "category": "Tailor",
        "name": "Max Function Length",
        "severity": "MAJOR",
        "description": "Enforce a line limit on the lengths of function bodies.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-function-length"
    },
    {
        "key": "max-line-length",
        "category": "Tailor",
        "name": "Max Line Length",
        "severity": "MAJOR",
        "description": "Enforce a character limit on the length of each line.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-line-length"
    },
    {
        "key": "max-name-length",
        "category": "Tailor",
        "name": "Max Name Length",
        "severity": "MAJOR",
        "description": "Enforce a character limit on the length of each construct name.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-name-length"
    },
    {
        "key": "max-struct-length",
        "category": "Tailor",
        "name": "Max Struct Length",
        "severity": "MAJOR",
        "description": "Enforce a line limit on the lengths of struct bodies.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#max-struct-length"
    },
    {
        "key": "min-name-length",
        "category": "Tailor",
        "name": "Min Name Length",
        "severity": "MAJOR",
        "description": "Enforce a minimum character limit on the length of each construct name.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#min-name-length"
    },
    {
        "key": "multiple-imports",
        "category": "Tailor",
        "name": "Multiple Imports",
        "severity": "MINOR",
        "description": "Multiple import statements should not be defined on a single line.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#multiple-imports"
    },
    {
        "key": "operator-whitespace",
        "category": "Tailor",
        "name": "Operator Whitespace",
        "severity": "MINOR",
        "description": "Flags operators that are not space delimited in operator declarations.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#operator-whitespace"
    },
    {
        "key": "parenthesis-whitespace",
        "category": "Tailor",
        "name": "Parenthesis Whitespace",
        "severity": "MINOR",
        "description": "Ensure no whitespace is present immediately before/after an opening parenthesis and before the closing parenthesis.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#parenthesis-whitespace"
    },
    {
        "key": "redundant-parentheses",
        "category": "Tailor",
        "name": "Redundant Parentheses",
        "severity": "MINOR",
        "description": "Control flow constructs, exception handling constructs, and values assigned in variable/constant declarations should not be enclosed in parentheses.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#redundant-parentheses"
    },
    {
        "key": "terminating-newline",
        "category": "Tailor",
        "name": "Terminating Newline",
        "severity": "MINOR",
        "description": "Verify that source files terminate with exactly one '\\n' character.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#terminating-newline"
    },
    {
        "key": "terminating-semicolon",
        "category": "Tailor",
        "name": "Terminating Semicolon",
        "severity": "MINOR",
        "description": "Statements should not be terminated with semicolons.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#terminating-semicolon"
    },
    {
        "key": "todo-syntax",
        "category": "Tailor",
        "name": "Todo Syntax",
        "severity": "MINOR",
        "description": "TODO comments should follow either <TODO: description> or <TODO(dev-name): description> format.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#todo-syntax"
    },
    {
        "key": "trailing-closure",
        "category": "Tailor",
        "name": "Trailing Closure",
        "severity": "MINOR",
        "description": "Functions that have a closure as their last argument should be calledusing trailing closure syntax.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#trailing-closure"
    },
    {
        "key": "trailing-whitespace",
        "category": "Tailor",
        "name": "Trailing Whitespace",
        "severity": "MINOR",
        "description": "Flag whitespace after the last non-whitespace character on each line until the newline.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#trailing-whitespace"
    },
    {
        "key": "upper-camel-case",
        "category": "Tailor",
        "name": "Upper Camel Case",
        "severity": "CRITICAL",
        "description": "Class, enum, enum value, struct, and protocol names should follow UpperCamelCase naming convention.",
        "styleguide": "https://github.com/sleekbyte/tailor/wiki/Rules#upper-camel-case"
    }
]