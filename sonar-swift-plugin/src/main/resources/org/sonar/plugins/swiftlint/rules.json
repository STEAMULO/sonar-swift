[
    {
        "key": "attributes",
        "category": "SwiftLint",
        "name": "Attributes",
        "description": "Attributes should be on their own lines in functions and types, but on the same line as variables and imports.",
        "severity": "MINOR"
    },
    {
        "key": "block_based_kvo",
        "category": "SwiftLint",
        "name": "Block Based KVO",
        "description": "Prefer the new block based KVO API with keypaths when using Swift 3.2 or later.",
        "severity": "MINOR"
    },
    {
        "key": "class_delegate_protocol",
        "category": "SwiftLint",
        "name": "Class Delegate Protocol",
        "description": "Delegate protocols should be class-only so they can be weakly referenced.",
        "severity": "MINOR"
    },
    {
        "key": "closing_brace",
        "category": "SwiftLint",
        "name": "Closing Brace Spacing",
        "description": "Closing brace with closing parenthesis should not have any whitespaces in the middle.",
        "severity": "MINOR"
    },
    {
        "key": "closure_end_indentation",
        "category": "SwiftLint",
        "name": "Closure End Indentation",
        "description": "Closure end should have the same indentation as the line that started it.",
        "severity": "MINOR"
    },
    {
        "key": "closure_parameter_position",
        "category": "SwiftLint",
        "name": "Closure Parameter Position",
        "description": "Closure parameters should be on the same line as opening brace.",
        "severity": "MINOR"
    },
    {
        "key": "closure_spacing",
        "category": "SwiftLint",
        "name": "Closure Spacing",
        "description": "Closure expressions should have a single space inside each brace.",
        "severity": "MINOR"
    },
    {
        "key": "colon",
        "category": "SwiftLint",
        "name": "Colon",
        "description": "Colons should be next to the identifier when specifying a type and next to the key in dictionary literals.",
        "severity": "MINOR"
    },
    {
        "key": "comma",
        "category": "SwiftLint",
        "name": "Comma Spacing",
        "description": "There should be no space before and one after any comma.",
        "severity": "MINOR"
    },
    {
        "key": "compiler_protocol_init",
        "category": "SwiftLint",
        "name": "Compiler Protocol Init",
        "description": "The initializers declared in compiler protocols such as `ExpressibleByArrayLiteral` shouldn't be called directly.",
        "severity": "MINOR"
    },
    {
        "key": "conditional_returns_on_newline",
        "category": "SwiftLint",
        "name": "Conditional Returns on Newline",
        "description": "Conditional statements should always return on the next line",
        "severity": "MINOR"
    },
    {
        "key": "control_statement",
        "category": "SwiftLint",
        "name": "Control Statement",
        "description": "if,for,while,do statements shouldn't wrap their conditionals in parentheses.",
        "severity": "MINOR"
    },
    {
        "key": "custom_rules",
        "category": "SwiftLint",
        "name": "Customs",
        "description": "Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display.",
        "severity": "MINOR"
    },
    {
        "key": "cyclomatic_complexity",
        "category": "SwiftLint",
        "name": "Cyclomatic Complexity",
        "description": "Complexity of function bodies should be limited.",
        "severity": "CRITICAL"
    },
    {
        "key": "discarded_notification_center_observer",
        "category": "SwiftLint",
        "name": "Discarded Notification Center Observer",
        "description": "When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.",
        "severity": "MINOR"
    },
    {
        "key": "discouraged_direct_init",
        "category": "SwiftLint",
        "name": "Discouraged Direct Initialization",
        "description": "Discouraged direct initialization of types that can be harmful.",
        "severity": "MINOR"
    },
    {
        "key": "dynamic_inline",
        "category": "SwiftLint",
        "name": "Dynamic Inline",
        "description": "Avoid using 'dynamic' and '@inline(__always)' together.",
        "severity": "MINOR"
    },
    {
        "key": "empty_count",
        "category": "SwiftLint",
        "name": "Empty Count",
        "description": "Prefer checking `isEmpty` over comparing `count` to zero.",
        "severity": "MINOR"
    },
    {
        "key": "empty_enum_arguments",
        "category": "SwiftLint",
        "name": "Empty Enum Arguments",
        "description": "Arguments can be omitted when matching enums with associated types if they are not used.",
        "severity": "MINOR"
    },
    {
        "key": "empty_parameters",
        "category": "SwiftLint",
        "name": "Empty Parameters",
        "description": "Prefer `() -> ` over `Void -> `.",
        "severity": "MINOR"
    },
    {
        "key": "empty_parentheses_with_trailing_closure",
        "category": "SwiftLint",
        "name": "Empty Parentheses with Trailing Closure",
        "description": "When using trailing closures, empty parentheses should be avoided after the method call.",
        "severity": "MINOR"
    },
    {
        "key": "explicit_init",
        "category": "SwiftLint",
        "name": "Explicit Init",
        "description": "Explicitly calling .init() should be avoided.",
        "severity": "MINOR"
    },
    {
        "key": "explicit_top_level_acl",
        "category": "SwiftLint",
        "name": "Explicit Top Level ACL",
        "description": "Top-level declarations should specify Access Control Level keywords explicitly.",
        "severity": "MINOR"
    },
    {
        "key": "explicit_type_interface",
        "category": "SwiftLint",
        "name": "Explicit Type Interface",
        "description": "Properties should have a type interface",
        "severity": "MINOR"
    },
    {
        "key": "extension_access_modifier",
        "category": "SwiftLint",
        "name": "Extension Access Modifier",
        "description": "Prefer to use extension access modifiers",
        "severity": "MINOR"
    },
    {
        "key": "fatal_error_message",
        "category": "SwiftLint",
        "name": "Fatal Error Message",
        "description": "A fatalError call should have a message.",
        "severity": "MINOR"
    },
    {
        "key": "file_header",
        "category": "SwiftLint",
        "name": "File Header",
        "description": "Header comments should be consistent with project patterns.",
        "severity": "MINOR"
    },
    {
        "key": "file_length",
        "category": "SwiftLint",
        "name": "File Line Length",
        "description": "Files should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "first_where",
        "category": "SwiftLint",
        "name": "First Where",
        "description": "Prefer using `.first(where:)` over `.filter { }.first` in collections.",
        "severity": "MINOR"
    },
    {
        "key": "for_where",
        "category": "SwiftLint",
        "name": "For Where",
        "description": "`where` clauses are preferred over a single `if` inside a `for`.",
        "severity": "MINOR"
    },
    {
        "key": "force_cast",
        "category": "SwiftLint",
        "name": "Force Cast",
        "description": "Force casts should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "force_try",
        "category": "SwiftLint",
        "name": "Force Try",
        "description": "Force tries should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "force_unwrapping",
        "category": "SwiftLint",
        "name": "Force Unwrapping",
        "description": "Force unwrapping should be avoided.",
        "severity": "MAJOR"
    },
    {
        "key": "function_body_length",
        "category": "SwiftLint",
        "name": "Function Body Length",
        "description": "Functions bodies should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "function_parameter_count",
        "category": "SwiftLint",
        "name": "Function Parameter Count",
        "description": "Number of function parameters should be low.",
        "severity": "MINOR"
    },
    {
        "key": "generic_type_name",
        "category": "SwiftLint",
        "name": "Generic Type Name",
        "description": "Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length.",
        "severity": "MINOR"
    },
    {
        "key": "identifier_name",
        "category": "SwiftLint",
        "name": "Identifier Name",
        "description": "Identifier names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short.",
        "severity": "MINOR"
    },
    {
        "key": "implicit_getter",
        "category": "SwiftLint",
        "name": "Implicit Getter",
        "description": "Computed read-only properties should avoid using the get keyword.",
        "severity": "MINOR"
    },
    {
        "key": "implicit_return",
        "category": "SwiftLint",
        "name": "Implicit Return",
        "description": "Prefer implicit returns in closures.",
        "severity": "MINOR"
    },
    {
        "key": "implicitly_unwrapped_optional",
        "category": "SwiftLint",
        "name": "Implicitly Unwrapped Optional",
        "description": "Implicitly unwrapped optionals should be avoided when possible.",
        "severity": "MINOR"
    },
    {
        "key": "large_tuple",
        "category": "SwiftLint",
        "name": "Large Tuple",
        "description": "Tuples shouldn't have too many members. Create a custom type instead.",
        "severity": "MINOR"
    },
    {
        "key": "leading_whitespace",
        "category": "SwiftLint",
        "name": "Leading Whitespace",
        "description": "Files should not contain leading whitespace.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_cggeometry_functions",
        "category": "SwiftLint",
        "name": "Legacy CGGeometry Functions",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "severity": "MINOR"
    },
    {
        "key": "legacy_constant",
        "category": "SwiftLint",
        "name": "Legacy Constant",
        "description": "Struct-scoped constants are preferred over legacy global constants.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_constructor",
        "category": "SwiftLint",
        "name": "Legacy Constructor",
        "description": "Swift constructors are preferred over legacy convenience functions.",
        "severity": "MINOR"
    },
    {
        "key": "legacy_nsgeometry_functions",
        "category": "SwiftLint",
        "name": "Legacy NSGeometry Functions",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "severity": "MINOR"
    },
    {
        "key": "let_var_whitespace",
        "category": "SwiftLint",
        "name": "Variable Declaration Whitespace",
        "description": "Let and var should be separated from other statements by a blank line.",
        "severity": "MINOR"
    },
    {
        "key": "line_length",
        "category": "SwiftLint",
        "name": "Line Length",
        "description": "Lines should not span too many characters.",
        "severity": "MAJOR"
    },
    {
        "key": "mark",
        "category": "SwiftLint",
        "name": "Mark",
        "description": "MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'",
        "severity": "MINOR"
    },
    {
        "key": "multiline_parameters",
        "category": "SwiftLint",
        "name": "Multiline Parameters",
        "description": "Functions and methods parameters should be either on the same line, or one per line.",
        "severity": "MINOR"
    },
    {
        "key": "nesting",
        "category": "SwiftLint",
        "name": "Nesting",
        "description": "Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.",
        "severity": "CRITICAL"
    },
    {
        "key": "nimble_operator",
        "category": "SwiftLint",
        "name": "Nimble Operator",
        "description": "Prefer Nimble operator overloads over free matcher functions.",
        "severity": "MINOR"
    },
    {
        "key": "no_extension_access_modifier",
        "category": "SwiftLint",
        "name": "No Extension Access Modifier",
        "description": "Prefer not to use extension access modifiers",
        "severity": "MINOR"
    },
    {
        "key": "notification_center_detachment",
        "category": "SwiftLint",
        "name": "Notification Center Detachment",
        "description": "An object should only remove itself as an observer in `deinit`.",
        "severity": "MINOR"
    },
    {
        "key": "number_separator",
        "category": "SwiftLint",
        "name": "Number Separator",
        "description": "Underscores should be used as thousand separator in large decimal numbers.",
        "severity": "MINOR"
    },
    {
        "key": "object_literal",
        "category": "SwiftLint",
        "name": "Object Literal",
        "description": "Prefer object literals over image and color inits.",
        "severity": "MINOR"
    },
    {
        "key": "opening_brace",
        "category": "SwiftLint",
        "name": "Opening Brace Spacing",
        "description": "Opening braces should be preceded by a single space and on the same line as the declaration.",
        "severity": "MINOR"
    },
    {
        "key": "operator_usage_whitespace",
        "category": "SwiftLint",
        "name": "Operator Usage Whitespace",
        "description": "Operators should be surrounded by a single whitespace when they are being used.",
        "severity": "MINOR"
    },
    {
        "key": "operator_whitespace",
        "category": "SwiftLint",
        "name": "Operator Function Whitespace",
        "description": "Operators should be surrounded by a single whitespace when defining them.",
        "severity": "MINOR"
    },
    {
        "key": "overridden_super_call",
        "category": "SwiftLint",
        "name": "Overridden methods call super",
        "description": "Some overridden methods should always call super",
        "severity": "MINOR"
    },
    {
        "key": "private_outlet",
        "category": "SwiftLint",
        "name": "Private Outlets",
        "description": "IBOutlets should be private to avoid leaking UIKit to higher layers.",
        "severity": "MINOR"
    },
    {
        "key": "private_over_fileprivate",
        "category": "SwiftLint",
        "name": "Private over fileprivate",
        "description": "Prefer `private` over `fileprivate` declarations.",
        "severity": "MINOR"
    },
    {
        "key": "private_unit_test",
        "category": "SwiftLint",
        "name": "Private Unit Test",
        "description": "Unit tests marked private are silently skipped.",
        "severity": "MINOR"
    },
    {
        "key": "prohibited_super_call",
        "category": "SwiftLint",
        "name": "Prohibited calls to super",
        "description": "Some methods should not call super",
        "severity": "MINOR"
    },
    {
        "key": "protocol_property_accessors_order",
        "category": "SwiftLint",
        "name": "Protocol Property Accessors Order",
        "description": "When declaring properties in protocols, the order of accessors should be `get set`.",
        "severity": "MINOR"
    },
    {
        "key": "redundant_discardable_let",
        "category": "SwiftLint",
        "name": "Redundant Discardable Let",
        "description": "Prefer `_ = foo()` over `let _ = foo()` when discarding a result from a function.",
        "severity": "MINOR"
    },
    {
        "key": "redundant_nil_coalescing",
        "category": "SwiftLint",
        "name": "Redundant Nil Coalescing",
        "description": "nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant",
        "severity": "MINOR"
    },
    {
        "key": "redundant_optional_initialization",
        "category": "SwiftLint",
        "name": "Redundant Optional Initialization",
        "description": "Initializing an optional variable with nil is redundant.",
        "severity": "MINOR"
    },
    {
        "key": "redundant_string_enum_value",
        "category": "SwiftLint",
        "name": "Redundant String Enum Value",
        "description": "String enum values can be omitted when they are equal to the enumcase name.",
        "severity": "MINOR"
    },
    {
        "key": "redundant_void_return",
        "category": "SwiftLint",
        "name": "Redundant Void Return",
        "description": "Returning Void in a function declaration is redundant.",
        "severity": "MINOR"
    },
    {
        "key": "return_arrow_whitespace",
        "category": "SwiftLint",
        "name": "Returning Whitespace",
        "description": "Return arrow and return type should be separated by a single space or on a separate line.",
        "severity": "MINOR"
    },
    {
        "key": "shorthand_operator",
        "category": "SwiftLint",
        "name": "Shorthand Operator",
        "description": "Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning.",
        "severity": "MINOR"
    },
    {
        "key": "sorted_imports",
        "category": "SwiftLint",
        "name": "Sorted Imports",
        "description": "Imports should be sorted.",
        "severity": "MINOR"
    },
    {
        "key": "statement_position",
        "category": "SwiftLint",
        "name": "Statement Position",
        "description": "Else and catch should be on the same line, one space after the previous declaration.",
        "severity": "MINOR"
    },
    {
        "key": "strict_fileprivate",
        "category": "SwiftLint",
        "name": "Strict fileprivate",
        "description": "`fileprivate` should be avoided.",
        "severity": "MINOR"
    },
    {
        "key": "switch_case_on_newline",
        "category": "SwiftLint",
        "name": "Switch Case on Newline",
        "description": "Cases inside a switch should always be on a newline",
        "severity": "MINOR"
    },
    {
        "key": "syntactic_sugar",
        "category": "SwiftLint",
        "name": "Syntactic Sugar",
        "description": "Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>",
        "severity": "MINOR"
    },
    {
        "key": "todo",
        "category": "SwiftLint",
        "name": "Todo",
        "description": "TODOs and FIXMEs should be avoided.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_closure",
        "category": "SwiftLint",
        "name": "Trailing Closure",
        "description": "Trailing closure syntax should be used whenever possible.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_comma",
        "category": "SwiftLint",
        "name": "Trailing Comma",
        "description": "Trailing commas in arrays and dictionaries should be avoided/enforced.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_newline",
        "category": "SwiftLint",
        "name": "Trailing Newline",
        "description": "Files should have a single trailing newline.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_semicolon",
        "category": "SwiftLint",
        "name": "Trailing Semicolon",
        "description": "Lines should not have trailing semicolons.",
        "severity": "MINOR"
    },
    {
        "key": "trailing_whitespace",
        "category": "SwiftLint",
        "name": "Trailing Whitespace",
        "description": "Lines should not have trailing whitespace.",
        "severity": "MINOR"
    },
    {
        "key": "type_body_length",
        "category": "SwiftLint",
        "name": "Type Body Length",
        "description": "Type bodies should not span too many lines.",
        "severity": "MAJOR"
    },
    {
        "key": "type_name",
        "category": "SwiftLint",
        "name": "Type Name",
        "description": "Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length.",
        "severity": "MINOR"
    },
    {
        "key": "unneeded_parentheses_in_closure_argument",
        "category": "SwiftLint",
        "name": "Unneeded Parentheses in Closure Argument",
        "description": "Parentheses are not needed when declaring closure arguments.",
        "severity": "MINOR"
    },
    {
        "key": "unused_closure_parameter",
        "category": "SwiftLint",
        "name": "Unused Closure Parameter",
        "description": "Unused parameter in a closure should be replaced with _.",
        "severity": "MINOR"
    },
    {
        "key": "unused_enumerated",
        "category": "SwiftLint",
        "name": "Unused Enumerated",
        "description": "When the index or the item is not used, `.enumerated()` can be removed.",
        "severity": "MINOR"
    },
    {
        "key": "unused_optional_binding",
        "category": "SwiftLint",
        "name": "Unused Optional Binding",
        "description": "Prefer `!= nil` over `let _ =`",
        "severity": "MINOR"
    },
    {
        "key": "valid_ibinspectable",
        "category": "SwiftLint",
        "name": "Valid IBInspectable",
        "description": "@IBInspectable should be applied to variables only, have its type explicit and be of a supported type",
        "severity": "MINOR"
    },
    {
        "key": "vertical_parameter_alignment",
        "category": "SwiftLint",
        "name": "Vertical Parameter Alignment",
        "description": "Function parameters should be aligned vertically if they're in multiple lines in a declaration.",
        "severity": "MINOR"
    },
    {
        "key": "vertical_parameter_alignment_on_call",
        "category": "SwiftLint",
        "name": "Vertical Parameter Alignment On Call",
        "description": "Function parameters should be aligned vertically if they're in multiple lines in a method call.",
        "severity": "MINOR"
    },
    {
        "key": "vertical_whitespace",
        "category": "SwiftLint",
        "name": "Vertical Whitespace",
        "description": "Limit vertical whitespace to a single empty line.",
        "severity": "MINOR"
    },
    {
        "key": "void_return",
        "category": "SwiftLint",
        "name": "Void Return",
        "description": "Prefer `-> Void` over `-> ()`.",
        "severity": "MINOR"
    },
    {
        "key": "weak_delegate",
        "category": "SwiftLint",
        "name": "Weak Delegate",
        "description": "Delegates should be weak to avoid reference cycles.",
        "severity": "MINOR"
    }
]